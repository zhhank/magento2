<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2012 X.commerce, Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * @var $this Mage_Adminhtml_Block_Catalog_Product_Edit
 */
?>



<div class="content-header">
    <h3 class="icon-head head-products"><?php echo $this->getHeader() ?></h3>
    <p class="content-buttons form-buttons"><?php echo $this->getBackButtonHtml() ?>
    <?php echo $this->getCancelButtonHtml() ?>
    <?php if($this->getProductId()): ?>
        <?php echo $this->getDeleteButtonHtml() ?>
        <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
            <?php echo $this->getDuplicateButtonHtml() ?>
        <?php endif; ?>
    <?php endif; ?>
    <?php if ($this->getProductSetId()): ?>
        <?php echo $this->getChangeAttributeSetButtonHtml() ?>
        <?php echo $this->getSaveButtonHtml() ?>
        <?php echo $this->getSaveAndEditButtonHtml() ?>
    <?php endif; ?>
    </p>
</div>
<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="product-edit-form" enctype="multipart/form-data">
    <?php echo $this->getBlockHtml('formkey')?>
    <div id="product-edit-form-tabs"></div>
    <?php echo $this->getChildHtml('product-type-tabs') ?>
</form>
<script type="text/javascript">
//<![CDATA[
    var productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
    jQuery('#product-edit-form').form().validation({validationUrl: '<?php echo $this->getValidationUrl() ?>'});
    function setSettings(urlTemplate, setElement, typeElement) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        setLocation(template.evaluate({attribute_set:$F(setElement),type:$F(typeElement)}));
    }

    function setSuperSettings(urlTemplate, attributesClass, validateField) {
        var attributesFields = $$('.' + attributesClass);
        var attributes = Form.serializeElements(attributesFields, true).attribute;
        if (typeof attributes == 'string') {
            attributes = [attributes];
        }

        if (!attributes) {
            $(validateField).value = 'no-attributes';
        } else {
            $(validateField).value = 'has-attributes';
        }

        var template = new Template(urlTemplate, productTemplateSyntax);
        var url = template.evaluate({
            attributes: encode_base64(attributes.join(',')).replace(new RegExp('/', 'g'), '%2F').replace(new RegExp('=', 'g'), '%3D')
        });
        jQuery('#product-edit-form').attr('action', url + '&active_tab=configurable').submit();
    }

    function checkMaxLength(Object, MaxLen)
    {
        if (Object.value.length > MaxLen-1) {
            Object.value = Object.value.substr(0, MaxLen);
        }
        return 1;
    }

jQuery(function() {
    <?php if ($this->getSelectedTabId()): ?>
    if(jQuery('#<?php echo $this->getSelectedTabId() ?>').length) {
        jQuery('#<?php echo $this->getSelectedTabId() ?>').trigger('click');
    }
    <?php endif; ?>
    jQuery(window).on('tabsbeforeactivate', function(e, ui){
        jQuery('#config_super_product')[ui.newTab.index() ? 'hide' : 'show']();
    }).triggerHandler('tabsbeforeactivate', [{newTab: jQuery('#<?php echo $this->getSelectedTabId() ?>').closest('li')}]);

    (function ($) {

        var masks = <?php echo $this->helper('Mage_Core_Helper_Data')->jsonEncode($this->getFieldsAutogenerationMasks())?>;
        var availablePlaceholders = <?php echo $this->helper('Mage_Core_Helper_Data')->jsonEncode($this->getAttributesAllowedForAutogeneration())?>;
        var Autogenerator = function(masks) {
            this._masks = masks || {};
            this._fieldReverseIndex = this._buildReverseIndex(this._masks);
        };

        $.extend(Autogenerator.prototype, {
            varRegexp: /{{([\w_]+?)}}/,
            varsRegexp: new RegExp('{{(' + availablePlaceholders.join('|') + ')}}', 'g'),
            data: {
                disabled: 'autogenerator-disabled'
            },
            bindAll: function(events) {
                var self = this;

                $.each(self._masks, function(field, mask) {
                    var disabler = function() {
                        $(this).data(self.data.disabled, $(this).val().replace(/\s/g, '') != '');
                    };
                    var $field = $('#' + field);
                    if (!$field.val() && mask.length > 0 && !self.varRegexp.test(mask)) {
                        $field.val(mask);
                    }
                    if ($field.length) {
                        disabler.call($field);
                        $field.bind('focus blur change keyup click', disabler);
                    }
                });

                $.each(self._fieldReverseIndex, function(field) {
                    var fields = this, $field = $('#' + field);
                    var filler = function(onlyText) {
                        $.each(fields, function() {
                            var $el = $('#' + this);
                            if ($el.data(self.data.disabled)) {
                                return;
                            }
                            if (onlyText === true && self.varRegexp.test(self._masks[this])) {
                                return;
                            }
                            var value = self._masks[this].replace(self.varsRegexp, function(maskfieldName) {
                                return $('#' + maskfieldName.slice(2, -2)).val();
                            });
                            $el.val(value);

                        });
                    };
                    if ($field.length) {
                        $field.bind(events || 'keyup change blur click', filler);
                        filler.call($field, true);
                    }

                });
            },
            _buildReverseIndex: function(masks) {
                var self = this;
                var fieldReverseIndex = {};
                $.each(masks, function(field, mask) {
                    $.each(mask.toString().match(self.varsRegexp) || [], function(key, maskName) {
                        var fieldName = maskName.slice(2, -2);
                        if (!(fieldName in fieldReverseIndex)) {
                            fieldReverseIndex[fieldName] = [];
                        }
                        fieldReverseIndex[fieldName].push(field);
                    })
                });
                return fieldReverseIndex;
            }
        });

        new Autogenerator(masks).bindAll();
    })(jQuery);
});

jQuery(function($) {
    var data = <?php echo $this->getTypeSwitcherData();?>;
    new TypeSwitcher(data).bindAll();
});

//]]>
</script>
