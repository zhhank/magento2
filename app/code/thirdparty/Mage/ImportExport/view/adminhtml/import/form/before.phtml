<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2012 X.commerce, Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/** @var $this Mage_ImportExport_Block_Adminhtml_Import_Edit_Before */
?>
<script type="text/javascript">
//<![CDATA[
    // Temporary Class will be replaced after refactoring of import/export functionality
    VarienImport = Class.create();
    VarienImport.prototype = {
        initialize: function() {
            /**
             * Name and ID for iframe for data POST-ing.
             * @type {string}
             */
            this.ifrElemName = 'import_post_target_frame';

            /**
             * List of existing behavior sets
             * @type {Array}
             */
            this.uniqueBehaviors = <?php echo $this->getUniqueBehaviors() ?>;

            /**
             * Behaviour codes for import entities
             * @type {Array}
             */
            this.entityBehaviors = <?php echo $this->getEntityBehaviors() ?>;
        },

        /**
         * Show behavior selector
         * @param {string|boolean} entity If false, then hide all behavior selectors
         */
        showBehavior: function(entity) {
            var requiredBehavior = this.entityBehaviors[entity];
            for (i = 0; i < this.uniqueBehaviors.length; i++) {
                var currentBehavior = this.uniqueBehaviors[i];
                this.showBehaviorFieldset(currentBehavior, requiredBehavior == currentBehavior);
            }
        },

        /**
         * Show/hide one behavior fieldset
         * @param {string} behavior
         * @param {boolean} isShow
         */
        showBehaviorFieldset: function(behavior, isShow) {
            var behaviorFieldset = behavior + '_fieldset';
            if (isShow) {
                $('head-' + behaviorFieldset).show();
                $(behaviorFieldset).show();
                $(behavior).enable();
                $(behavior).addClassName('required-entry');
            } else {
                $('head-' + behaviorFieldset).hide();
                $(behaviorFieldset).hide();
                $(behavior).selectedIndex = 0;
                $(behavior).disable();
                $(behavior).removeClassName('required-entry');
            }
        },

        /**
         * Show upload file field
         * @param {boolean} isShow
         */
        showUploadFile: function(isShow) {
            if (isShow == true) {
                $('head-upload_file_fieldset').show();
                $('upload_file_fieldset').show();
            } else {
                $('head-upload_file_fieldset').hide();
                $('upload_file_fieldset').hide();
            }
        },

        /**
         * Handle value change in entity type selector
         */
        handleEntityTypeSelector: function() {
            if ($('entity') && $F('entity')) {
                this.showBehavior($F('entity'));
                this.showUploadFile(true);
            } else {
                this.showBehavior(false);
                this.showUploadFile(false);
            }
        },

        /**
         * Post form data to dynamic iframe.
         * @param {string} newActionUrl OPTIONAL Change form action to this if specified
         */
        postToFrame: function(newActionUrl) {
            if (!jQuery('[name="' + this.ifrElemName + '"]').length) {
                jQuery('body').append('<iframe name="' + this.ifrElemName + '" id="' + this.ifrElemName
                    + '" style="display:none;"/>');
            }
            jQuery('body')
                .loader({
                    icon: jQuery('#loading_mask_loader img').attr('src')
                })
                .loader('show');
            var form = jQuery('#edit_form')
                .one('invalid-form.validate', function(e){jQuery('body').loader('hide')});
            newActionUrl = (newActionUrl ? newActionUrl : form.attr('action')) +
                (form.attr('action').lastIndexOf('?') != -1 ? '&' : '?')+
                'form_key=' + encodeURIComponent(form.find('[name="form_key"]').val());

            form.trigger('save', [{
                action: newActionUrl,
                target: this.ifrElemName
            }]);
        },

        /**
         * Actions after data post complete. Hide load mask, remove iframe, run response processing method.
         * @param {Object} response
         */
        postToFrameComplete: function(response) {
            jQuery('body').loader('hide');
            $(this.ifrElemName).remove();
            this.postToFrameProcessResponse(response);
        },

        /**
         * Process response JSON.
         * @param {Object} response
         */
        postToFrameProcessResponse: function(response) {
            if ('object' != typeof(response)) {
                return alert('Invalid response');
            }
            $H(response).each(function(pair) {
                switch (pair.key) {
                    case 'show':
                    case 'clear':
                    case 'hide':
                        $H(pair.value).each(function(val) {
                            if ($(val.value)) {
                                $(val.value)[pair.key]();
                            }
                        });
                        break;
                    case 'innerHTML':
                    case 'value':
                        $H(pair.value).each(function(val) {
                            var el = $(val.key);
                            if (el) {
                                el[pair.key] = val.value;
                                // if element does not visible
                                el.offsetWidth || el.up('div.entry-edit').show();
                            }
                        });
                        break;
                    case 'removeClassName':
                    case 'addClassName':
                        $H(pair.value).each(function(val) {
                            if ($(val.key)) $(val.key)[pair.key](val.value);
                        });
                        break;
                    default:
                        alert(pair.key + ': ' + pair.value);
                        break;
                }
            });
        },

        /**
         * Send form data to Start action when file is validated.
         * @param {string} newActionUrl
         * @param {string} sourceFileField
         */
        startImport: function(newActionUrl, sourceFileField) {
            $(sourceFileField).removeClassName('required-entry');
            this.postToFrame(newActionUrl);
            $(sourceFileField).addClassName('required-entry');
        }
    };

    varienImport = new VarienImport();
//]]>
</script>
